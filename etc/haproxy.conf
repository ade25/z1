global
    # Log to syslog
    log      localhost:514 local2
    
    # Max connections
    maxconn  1024
    
    # Number of processes
    nbproc 1

defaults
    # Use HTTP connections
    mode http
    
    # close HTTP keep-alives to make header analysis work across keep-alives
    option httpclose
    
    # Remove requests from the queue if people press stop button
    option abortonclose
    
    # Try to connect this many times on failure
    retries 3
    
    # If a client is bound to a particular backend but it goes down,
    # send them to a different one
    option redispatch
    
    # Expose a URL to make it easier to check if haproxy is up
    monitor-uri /_haproxy_ping_
    
    # Default timeouts
    timeout connect 7s
    timeout queue   300s
    timeout client  300s
    timeout server  300s
    
    # Enable status page at this URL, on the port HAProxy is bound to
    listen stats  localhost:8222
    stats enable
    stats uri /
    stats refresh 5s
    stats realm Haproxy statistics

# Default front-end
frontend loadbalancer
    
    # Bind to the given address
    bind localhost:8200
    
    # Log errors in HTTP logging format
    log    global
    option httplog
    option dontlog-normal
    
    # Access rules

    # Check for hostnames in request
    # acl default_cluster url_sub zope1.kreativkombinat.de
    # acl asg_cluster hdr_beg(host) -i asg.kreativkombinat.de
    acl asg_cluster url_sub asg.kreativkombinat.de
    acl reiter_cluster url_sub reiter.mfg-werbeagentur.de
    acl teama3_cluster url_sub team-a-3.de
    acl ahlt_cluster url_sub ahlt-rechtsanwaelte.de
    acl androschin_cluster url_sub androschin.kreativkombinat.de
    acl dichtl_cluster url_sub metzgerei-dichtl.de
    acl existenz_cluster url_sub schuldnerberatung-augsburg-muenchen.de
    acl rms_cluster url_sub rms.kreativkombinat.de
    acl langer_cluster url_sub promo.eisglut.de
    acl anna_cluster url_sub anna.kreativkombinat.de

    # Check that we have at least one node up in each cluster
    acl asg_cluster_up nbsrv(asg) gt 0
    acl reiter_cluster_up nbsrv(reiter) gt 0
    acl teama3_cluster_up nbsrv(teama3) gt 0
    acl ahlt_cluster_up nbsrv(ahlt) gt 0
    acl androschin_cluster_up nbsrv(androschin) gt 0
    acl dichtl_cluster_up nbsrv(dichtl) gt 0
    acl existenz_cluster_up nbsrv(existenz) gt 0
    acl rms_cluster_up nbsrv(rms) gt 0
    acl langer_cluster_up nbsrv(langer) gt 0
    acl anna_cluster_up nbsrv(anna) gt 0

    # Routing
    use_backend asg if asg_cluster_up asg_cluster
    use_backend reiter if reiter_cluster_up reiter_cluster
    use_backend teama3 if teama3_cluster_up teama3_cluster
    use_backend ahlt if ahlt_cluster_up ahlt_cluster
    use_backend androschin if androschin_cluster_up androschin_cluster
    use_backend dichtl if dichtl_cluster_up dichtl_cluster
    use_backend existenz if existenz_cluster_up existenz_cluster
    use_backend rms if rms_cluster_up rms_cluster
    use_backend langer if langer_cluster_up langer_cluster
    use_backend anna if anna_cluster_up anna_cluster

    default_backend panic

# Backend for all nodes.
backend asg
    
    # Load balance based on number of connections
    balance leastconn
    
    # Record where we've been
    rspadd X-Cluster:\ default
    
    # Note: The maxconn values here match the ZServer thread count. This means requests pile up
    # in HAProxy until Zope's ready, instead of getting stuck in Zope.
    
    server asg  127.0.0.1:8401 check rise 1 weight 50 maxconn 4
    
backend reiter
    
    # Load balance based on number of connections
    balance leastconn
    # Record where we've been
    rspadd X-Cluster:\ default
    # Note: The maxconn values here match the ZServer thread count. This means requests pile up
    # in HAProxy until Zope's ready, instead of getting stuck in Zope.
    
    server reiter  127.0.0.1:8402 check rise 1 weight 50 maxconn 4

backend teama3
    
    # Load balance based on number of connections
    balance leastconn
    # Record where we've been
    rspadd X-Cluster:\ default
    # Note: The maxconn values here match the ZServer thread count. This means requests pile up
    # in HAProxy until Zope's ready, instead of getting stuck in Zope.
    
    server teama3  127.0.0.1:8403 check rise 1 weight 50 maxconn 4

backend ahlt
    
    # Load balance based on number of connections
    balance leastconn
    # Record where we've been
    rspadd X-Cluster:\ default
    # Note: The maxconn values here match the ZServer thread count. This means requests pile up
    # in HAProxy until Zope's ready, instead of getting stuck in Zope.
    
    server ahlt  127.0.0.1:8404 check rise 1 weight 50 maxconn 4

backend androschin
    
    # Load balance based on number of connections
    balance leastconn
    # Record where we've been
    rspadd X-Cluster:\ default
    # Note: The maxconn values here match the ZServer thread count. This means requests pile up
    # in HAProxy until Zope's ready, instead of getting stuck in Zope.
    
    server androschin  127.0.0.1:8405 check rise 1 weight 50 maxconn 4

backend dichtl
    
    # Load balance based on number of connections
    balance leastconn
    # Record where we've been
    rspadd X-Cluster:\ default
    # Note: The maxconn values here match the ZServer thread count. This means requests pile up
    # in HAProxy until Zope's ready, instead of getting stuck in Zope.
    
    server dichtl  127.0.0.1:8406 check rise 1 weight 50 maxconn 4

backend existenz
    
    # Load balance based on number of connections
    balance leastconn
    # Record where we've been
    rspadd X-Cluster:\ default
    # Note: The maxconn values here match the ZServer thread count. This means requests pile up
    # in HAProxy until Zope's ready, instead of getting stuck in Zope.
    
    server existenz  127.0.0.1:8407 check rise 1 weight 50 maxconn 4

backend rms
    
    # Load balance based on number of connections
    balance leastconn
    # Record where we've been
    rspadd X-Cluster:\ default
    # Note: The maxconn values here match the ZServer thread count. This means requests pile up
    # in HAProxy until Zope's ready, instead of getting stuck in Zope.
    
    server rms  127.0.0.1:8408 check rise 1 weight 50 maxconn 4

backend langer
    
    # Load balance based on number of connections
    balance leastconn
    # Record where we've been
    rspadd X-Cluster:\ default
    # Note: The maxconn values here match the ZServer thread count. This means requests pile up
    # in HAProxy until Zope's ready, instead of getting stuck in Zope.
    
    server langer  127.0.0.1:8409 check rise 1 weight 50 maxconn 4

backend anna
    
    # Load balance based on number of connections
    balance leastconn
    # Record where we've been
    rspadd X-Cluster:\ default
    # Note: The maxconn values here match the ZServer thread count. This means requests pile up
    # in HAProxy until Zope's ready, instead of getting stuck in Zope.
    
    server anna  127.0.0.1:8410 check rise 1 weight 50 maxconn 4

# This is hit only if none of the other clusters are working
backend panic
    
    balance leastconn
    
    # Panic!!!!111eleven!!
    redirect location /system-error drop-query
